{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"About","text":"<p>CRI FileSystem V2 Hook is a mod based on Reloaded II that allows you to add/replace files in games that use CRI Middleware and the CPK container.  </p>"},{"location":"#support","title":"Support","text":"<p>Listed in ascending order by Build Date.</p> <p>Games marked with a \u26a0\ufe0f should run correctly but were not tested with existing mods.</p> <p>Games marked with a \u203c\ufe0f I do not own and were untested. They may or may not work.</p> <p>If you need to support an additional game, and it is not listed here; consider contributing.</p>"},{"location":"#x64-games","title":"x64 Games","text":"Game Build Date CRI FS Version Compiler Notes Yakuza 0 Jan  9 2015 13:02:51 2.66.07 MSC16.00.40219.1,MT \u26a0\ufe0f Loads files by ID, which CriFsV2Hook does not support hooking. Missing <code>SetPriority</code>. Yakuza Kiwami Oct  6 2015 19:45:41 2.71.02 MSC17.00.61030.0,MT \u26a0\ufe0f Loads files by ID, which CriFsV2Hook does not support hooking. Missing <code>SetPriority</code>. One Piece: Burning Blood Oct  8 2015 13:15:23 2.70.00 MSC16.00.40219.1,MT Missing <code>SetPriority</code> function. Tekken 7 Jul 27 2017 11:01:21 2.73.00 MSC17.00.61030.0,MT Game does not use CPK files. But it'll work if the game ever loads one. Sonic Forces Oct  6 2017 14:17:55 2.75.05 MSC17.00.61030.0,MT \u26a0\ufe0f Yakuza Kiwami 2 Oct  6 2017 14:17:55 2.75.05 MSC17.00.61030.0,MT Game does not use CPK files. But it'll work if the game ever loads one. Valkyria Chronicles 4 Oct  6 2017 14:17:55 2.75.05 MSC17.00.61030.0,MT Yakuza 3 Remastered Apr  5 2018 19:09:32 2.77.01 MSC17.00.61030.0,MT Yakuza 4 Remastered Aug  7 2018 15:30:45 2.77.01 MSC17.00.61030.0,MT Yakuza 5 Remastered Jan 25 2019 16:46:40 2.77.03 MSC17.00.61030.0,MT Yakuza 6: The Song of Life Jan 25 2019 16:46:40 2.77.03 MSC17.00.61030.0,MT Olympic Games Tokyo 2020 Dec 13 2019 13:22:56 2.78.11 MSC19.00.24215.1,MT Only has <code>BindFile</code>. Yakuza : Like a Dragon Jun  8 2020 21:19:38 2.78.12.04 MSC19.00.24210.0,MT Game does not use CPK files. But it'll work if the game ever loads one. Shin Megami Tensei V: Vengeance Jun 24 2021 11:17:22 2.79.23 MSC19.00.24215.1,MT Only has <code>BindFile</code>. Missing <code>SetPriority</code> function. Game does not use CPK files. Lost Judgment Apr 15 2021 19:02:38 2.80.17 MSC19.00.24210.0,MT Only has <code>BindFile</code>. Soul Hackers 2 Jun 20 2022 13:06:50 2.81.5 MSC19.00.24210.0,MT Only has <code>BindFile</code>. Game does not use CPK files. Persona 5 Royal Dec 28 2021 11:03:45 2.81.6 MSC19.00.24210.0,MT Persona 3 Portable May 12 2022 19:34:26 2.82.15 MSC19.16.27045.0,MT Persona 4 The Golden (64-bit) May 12 2022 19:34:26 2.82.15 MSC19.16.27045.0,MT Judgment Aug  5 2022 19:37:39 2.78.11 MSC19.00.24210.0,MT Only has <code>BindFile</code>. Like a Dragon: Infinite Wealth Mar 15 2023 18:34:48 2.83.2 MSC19.16.27048.0,MT Like a Dragon Gaiden: The Man Who Erased His Name Mar 15 2023 18:34:48 2.83.2 MSC19.16.27048.0,MT Persona 5 Tactica Mar 24 2023 14:21:01 2.83.2 MSC19.16.27048.0,MT Only has <code>BindFile</code>. Game does not use CPK files. Metaphor: ReFantazio (Clean) Oct  2 2023 10:26:25 2.85.1 MSC19.16.27048.0,MT Metaphor: ReFantazio (Fucked by Denuvo) Oct  2 2023 10:26:25 2.85.1 MSC19.16.27048.0,MT Tampered by Denuvo obfuscation inserting junk into static variables. Like a Dragon: Pirate Yakuza in Hawaii Dec  2 2024 14:51:28 2.86.9 MSC19.29.30148.0,MT"},{"location":"#x86-games","title":"x86 Games","text":"<p>Bayonetta having lower CRI version despite older build date is NOT a typo.</p> Game Build Date CRI FS Version Compiler Notes Binary Domain Jan 31 2011 18:26:26 2.23.00 MSC1500,MT Missing <code>SetPriority</code> function. Sonic Generations Apr  1 2011 21:08:31 2.24.04 MSC1500,MT Sonic Lost World Feb 19 2013 12:43:50 2.59.21 MSC1600,MT \u26a0\ufe0f Tales of Symphonia Apr 11 2013 12:11:23 2.60.00 MSC1600,MT Missing <code>SetPriority</code> function. One Piece: Unlimited World Red Mar  3 2014 14:59:30 2.63.08 MSC1600,MT Missing <code>SetPriority</code> function. Bayonetta Jan 27 2017 19:10:26 2.61.09 MSC1600,MT Missing <code>SetPriority</code> function."},{"location":"#supported-but-recognized-games","title":"Supported But Recognized Games","text":"<p>Games which are 'supported' but miss code necessary for this mod to work. (Needed code for this mod was unused and removed)</p> Game Build Date CRI FS Version Compiler Notes Sonic 4 Episode 1 Apr  1 2011 21:08:31 2.24.04 MSC1500,MT Does not Bind CPKs, uses them through internal API so methods missing. Sonic 4 Episode 2 Apr  1 2011 21:08:31 2.24.04 MSC1500,MT Same library as Sonic Generations; might be possible to transplant the missing code. NieR Automata (YoRHa Edition) Jun 20 2016 18:17:30 2.73.00 MSC17.00.61030.0,MT Missing 'BindFiles'. <p>They would be supported if I ever took the time out to make a 'CPK Emulator'.</p>"},{"location":"#aarch64-arm64-games","title":"AArch64 (ARM64) Games","text":"<p>If Reloaded3 one day arrives on the Switch, this mod will be expanded to support the Switch and ARM64 games.</p>"},{"location":"#additional-features","title":"Additional Features","text":"<ul> <li>Mods can use case-insensitive file paths. (Note: CRI is Case Sensitive)  </li> <li>Supports games using both UTF-8 and ANSI encoding.  </li> <li>Hot Reload (Add/Replace files without app restart).  </li> <li>API (dynamically add files, etc.)  </li> <li>Log files accessed by application.  </li> <li>Log redirected files.  </li> <li>Replace music in AWB files inside CPKs without using additional disk space, via an extension mod.  </li> </ul>"},{"location":"#building","title":"Building","text":"<ul> <li>Install Reloaded II.  </li> <li>Install .NET 7 SDK.  </li> <li>[Optional] Download Visual Studio/Rider and open the .sln file.  </li> </ul> <p>When you build your project, the files will automatically be copied to the right directory and be loaded by Reloaded. Refer to the Reloaded wiki if you need more information.</p>"},{"location":"adding-game-support/","title":"Adding Game Support","text":"<p>Provided for educational purposes. Legality of decompilation may vary worldwide.</p> <p>Shows you how to add support for additional games that are not already supported.</p> <p>Small amount of Programming experience required.</p> <p>For people unfamiliar with reverse engineering, this guide tries to be as beginner friendly as possible.</p> <p>Once you're familiar with the process, adding support for a new game takes ~30 minutes.</p>"},{"location":"adding-game-support/#about","title":"About","text":"<p>The implementation of CriFsV2Hook is specifically crafted to make use of as much 'public' APIs as possible; and avoid internals.  </p> <p>The existing logic should work with any game out of the box. However, it is possible that due to the library &amp; compiler combination used in a game, the mod might not be able to find the relevant functions to hook.  </p> <p>CriFsV2Hook relies on Signature Scanning to find the relevant CRI functions.</p>"},{"location":"adding-game-support/#what-you-will-be-doing","title":"What you will be doing.","text":"<p>We will be inserting function signatures to <code>CpkBinderPointers.cs</code></p> <p></p> <p>For this guide, I will demonstrate step by step process by adding support for a game and walking through what I did.</p>"},{"location":"adding-game-support/#update-the-c-project","title":"Update the C# Project","text":"<p>To get started, add your game to Reloaded-II, and edit this mod's <code>ModConfig.json</code> file to auto enable support for this game:</p> <pre><code>\"SupportedAppId\": [\n    \"p4g.exe\",\n    \"p5r.exe\",\n    \"p3p.exe\",\n    \"p3p_sln_dt_m.exe\",\n    \"sonic forces.exe\",\n    \"opu3.exe\",\n    \"slw.exe\",\n    \"sonicgenerations.exe\",\n]\n</code></pre> <p>Add your game's Reloaded <code>AppId</code> to this list. This is usually the name of the <code>.exe</code> file in lowercase; otherwise check <code>Apps</code> folder in Reloaded folder.</p> <p>Once you are done, build the C# project. In my case, I will add <code>yakuzakiwami.exe</code>.</p> <p></p> <p>Once built, the mod should show in your mods list for the given game.</p>"},{"location":"adding-game-support/#test-the-mod","title":"Test The Mod","text":"<p>Test the mod to see how much works out of the box.</p> <p>When you boot the game up with Reloaded, <code>CriFsV2Hook</code> will print out a log, showing the closest matching game.</p> <p></p> <p>If you are lucky, the mod might work out the box; if you're not; proceed and implement it with me.</p>"},{"location":"adding-game-support/#copy-the-closest-games-config","title":"Copy the Closest Game's Config","text":"<p>Copy the config from the closest matching game, in this game I copied from Sonic Forces.</p> <p></p> <p>Blank out any signatures that were not found, as well as the compiler and CRI version. Verify whether the signatures are correct (using information later in this guide).  </p>"},{"location":"adding-game-support/#setup-decompiler","title":"Setup Decompiler","text":"<p>IDA Pro is recommended, because of the Lumen public Lumina server.</p> <p>Lumen is a database of function signatures, all 3000+ CRI function signatures I made, including those used by the mod are uploaded there.</p> <p>When using Lumen you should usually find a couple of hundred CRI functions automatically labeled for you out of the box for free.</p> <ul> <li>First please set up Lumen.  </li> <li>And install SigMakerEx plugin.  </li> <li>Then, open your Disassembly in IDA.  </li> </ul> <p>Press <code>Lumina -&gt; Pull All Metadata</code>.  </p> <p>Games with a lot of code [especially Denuvo Titles] can take a while to pull from Lumen when you hit <code>Pull All Metadata</code>. It can even take 5 minutes, please be patient; the process is not 'stuck'.</p> <p>If you don't have an existing disassembly, simply disassemble a new file with IDA and wait for analysis to finish.</p>"},{"location":"adding-game-support/#denuvo-drm","title":"Denuvo DRM","text":"<p>Denuvo titles can have some nastiness which is very modding unfriendly.</p> <p>Consider refusing to buy any game which uses this kind of DRM and encourage your friends to do the same, too. (Also applies to: Microsoft Store DRM, Arxan, VMProtect, etc.)</p> <p>Unfortunately, as an anti-temper tech, Denuvo is by design engineered to make modding a painful experience. </p> <p>The Denuvo experience includes: - 30+ hours of waiting for analysis to complete. (Without Denuvo: 2-10 minutes) - Renaming EXE segments to try break decompilers [in more recent versions].  </p> <p>In any case; here are some tips for dealing with Denuvo binaries.</p>"},{"location":"adding-game-support/#force-load-all-segments","title":"Force Load All Segments","text":"<p>Modify the following setting (in <code>ida/cfg/pe.cfg</code>). <pre><code>// Always load all sections of a PE file?\n// If no, sections like .reloc and .rsrc are skipped\nPE_LOAD_ALL_SECTIONS = YES\n</code></pre></p> <p>Without this setting, there's a good chance a chunk of your disassembly may appear 'wrecked' full of invalid references to variables.</p>"},{"location":"adding-game-support/#skip-disassembling-obfuscated-game-code","title":"Skip Disassembling Obfuscated Game Code","text":"<p>Around 70-90% of every Denuvo EXE is comprised of extreme obfuscation using virtual machines with randomised instruction sets.</p> <p>There's usually around 40-100 'hook-in' points which redirect game code to these virtual machines; obfuscating and holding the original game code hostage.</p> <p>That said, it is statistically very unlikely any CRI code will be held hostage, so it's wasteful to disassemble this.</p> <p>Observe the 'segments' view in your disassembler:</p> <p></p> <p>The obfuscated, encrypted virtual machine stuff is usually the largest segment in the EXE, and towards the back of it.  </p> <p>If you go to <code>View -&gt; Open Subviews -&gt; Segments</code>, you can delete this segment and analysis should complete in a more reasonable amount of time that's not 30+ hours.  When deleting select both checkboxes (<code>Confirm Deletion</code> AND <code>Disable Addresses</code>).</p> <p>Denuvo is actually friendlier than DRMs of the past here; which would obfuscate code all over the place. Denuvo leaves most of the original code intact. \ud83d\udc4d</p>"},{"location":"adding-game-support/#steam-embedded-drm","title":"Steam Embedded DRM","text":"<p>If you run a game via Reloaded; it will log to console if Steam DRM is present.</p> <p>If a game has Steam Embedded DRM (which encrypts game code); you will usually find your disassembler will report a  low number of functions (&lt; 200).  </p> <p>In those cases, verify Steam DRM is present via booting in Reloaded, or via the <code>View -&gt; Open Subviews -&gt; Segments</code> window. If you see a section in there which is named <code>.bind</code>, Steam DRM is present.  </p> <p>Remove this DRM with Steamless, and throw the new EXE into your decompiler.</p>"},{"location":"adding-game-support/#finding-functions","title":"Finding Functions","text":"<p>Provides guidance on how to quickly find functions.</p> <p>CRI has a lot of very helpful error logging; we will be taking advantage of this.</p> <p>Now we will hunt for the missing functions; the general procedure is as follows: - Find the Function. - Create a function signature (<code>Edit -&gt; Plugins -&gt; SigMakerEx -&gt; OK (Create Signature for Function)</code>) - Copy signature from <code>Output</code> window to source code.  </p> <p>In some rare cases, Lumen signatures might find the function, but our signatures didn't; try searching name in 'functions' window first.</p> <p>Doublecheck (using the info below) that your existing signatures taken from other games are correct.</p>"},{"location":"adding-game-support/#getting-cri-version","title":"Getting CRI Version","text":"<p>Open the Strings window (<code>View</code> -&gt; <code>Open Subviews</code> -&gt; <code>Strings</code>), filter for string <code>CRI File System/</code> and doubleclick the result.</p> <p></p> <p>Copy the CRI version and compiler info into the source code:</p> <p></p>"},{"location":"adding-game-support/#crifs_initializelibrary","title":"CriFs_InitializeLibrary","text":"<p>This acts as a general tutorial of what to do later; after this, you're left on your own.</p> <p>Select the variable that contains the version string, right click it and hit <code>Jump to xref to Operand</code> (hotkey: <code>x</code>).  </p> <p></p> <p>Press <code>F5</code> ('Generate Pseudocode'), and drag out the tab with the C code; docking it to the right, your window should now look like this:  </p> <p></p> <p>Now sync the pseudocode window with main view by right clicking:</p> <p></p> <p>This function you see is <code>criFs_InitializeLibrary</code>, to rename it, click on function name, and press <code>N</code>, then rename it to <code>criFs_InitializeLibrary</code>.  </p> <p>Then, to get the signature, move the cursor to the start of the function and open SigMakerEx <code>(Edit -&gt; Plugins -&gt; SigMakerEx)</code>.</p> <p>Create a signature for a function, and copy it from the Output Window in IDA.</p> <p></p> <p>And into the source code:</p> <pre><code>CriFs_InitializeLibrary = \"48 89 5C 24 18 48 89 7C 24 20 55 41\",\n</code></pre> <p>You're on your own from now \ud83d\ude09.</p>"},{"location":"adding-game-support/#crifs_calculateworksizeforlibrary","title":"CriFs_CalculateWorkSizeForLibrary","text":"<p>This function is called to get amount of memory to allocate before it is passed to <code>criFs_InitializeLibrary</code>.</p> <p>To find this function, search for error string <code>E2009070701</code> and find the method that uses it. That method is <code>criFs_CalculateWorkSizeForLibrary</code>.  </p>"},{"location":"adding-game-support/#crifs_finalizelibrary","title":"CriFs_FinalizeLibrary","text":"<p>Search for method which uses error string <code>E2008072816</code>.</p>"},{"location":"adding-game-support/#crifsbinder_bindcpk","title":"CriFsBinder_BindCpk","text":"<p>Search for method which uses error string <code>E2008071620</code>. This method is <code>criFsBinder_BindCpkSub</code>. The method which calls this method is <code>criFsBinder_BindCpk</code>.  </p>"},{"location":"adding-game-support/#crifsbinder_bindfile-crifsbinder_bindfiles","title":"CriFsBinder_BindFile &amp; CriFsBinder_BindFiles","text":"<p>Search for method which uses error string <code>E2008071630</code>. This is <code>criFsBinder_bindFilesSub</code>.  </p> <p>The method which passes a constant <code>-1</code> to <code>criFsBinder_bindFilesSub</code> is <code>criFsBinder_BindFiles</code>, the other method that passes constant <code>1</code> is <code>criFsBinder_BindFile</code>.</p> <p>Sometimes either <code>BindFile</code> or <code>BindFiles</code> may not exist. When only <code>BindFile</code> is present, CriFsV2Hook will try to patch that function to allow binding of multiple files.</p> <p>That patching happens in <code>CpkBinder.cs</code></p>"},{"location":"adding-game-support/#crifsbinder_find","title":"CriFsBinder_Find","text":"<p>Search for method which uses error string <code>W2008121610</code>. This is <code>crifsbinder_checkBoss</code>.  Then check out the 4-8 methods which call said method.</p> <p>One of them will be find, which looks like this: <pre><code>// Usually looks like this  \n__int64 __fastcall criFsBinder_Find(int a1, __int64 a2, void **a3, _DWORD *a4) \n{ \n  __int64 result; // rax \n\n  if ( a4 ) \n    *a4 = 0; \n  if ( a3 ) \n    memset(a3, 0, 0x30ui64); \n  if ( (unsigned int)crifsbinder_checkBoss() ) \n    return 0xFFFFFFFFi64; \n  result = sub_1400411F4(a1, 0, 0i64, (__int64)a4); \n  if ( a3 ) \n  { \n    if ( *a3 == &amp;unk_1419C6A68 ) \n      *a3 = 0i64; \n  } \n  return result; \n} \n</code></pre></p> <p>In older versions of CRI, it might look more like this:</p> <pre><code>int __cdecl criFsBinder_Find(int a1, __int16 a2, void *a3, _DWORD *a4) \n{ \n  if ( a4 ) \n    *a4 = 0; \n  if ( a3 ) \n    sub_4490D0(a3); \n  if ( sub_448F3B() ) \n    return -1; \n  else \n    return sub_44A771(a2, (int)a3, 0, 0); \n} \n</code></pre> <p>DO NOT confuse this with FindById</p> <pre><code>__int64 __fastcall criFsBinder_FindById(int a1, int a2, void *a3, _DWORD *a4) \n{ \n  int v5; // ebx \n\n  v5 = (int)a3; \n  if ( a4 ) \n    *a4 = 0; \n  if ( a2 &lt; 0 ) \n  { \n    criErr_NotifyGeneric(0i64, \"E2014012701\", 4294967294i64); \n    return 0xFFFFFFFFi64; \n  } \n  if ( a3 ) \n    memset(a3, 0, 0x30ui64); \n  if ( (unsigned int)crifsbinder_checkBoss() ) \n    return 0xFFFFFFFFi64; \n  return sub_140040E44(a1, a2, v5, 0, 0i64, (__int64)a4, 0i64); \n} \n</code></pre> <p>If you see <code>E2014012701</code>, you found <code>FindById</code>. Out of all the methods that call <code>crifsbinder_checkBoss</code>, <code>criFsBinder_Find</code> should be the only one that does not call <code>criErr_NotifyGeneric</code>.</p>"},{"location":"adding-game-support/#crifsbinder_getworksizeforbindfiles","title":"CriFsBinder_GetWorkSizeForBindFiles","text":"<p>Search for method which uses error string <code>E2008082901</code>, this is <code>criFsBinder_GetWorkSizeForBindFiles</code>.</p>"},{"location":"adding-game-support/#crifsbinder_getstatus","title":"CriFsBinder_GetStatus","text":"<p>Search for method which uses error string <code>E2012082901</code>, this is <code>criFsBinder_GetStatus</code>.</p> <p>This error was added in 2012.</p> <p>For games older than 2012, finding this function can be a bit harder; since this is called often from various contexts and has no strings attached.</p> <p>The code you want looks something like this:</p> <pre><code>int __cdecl criFsBinder_GetStatus(int a1, _DWORD *a2)\n{\n  int v3; // eax\n\n  if ( sub_7D17D0() )\n  {\n    sub_7D32B2(a1);\n    if ( a2 )\n    {\n      v3 = sub_7D17D0();\n      if ( v3 )\n        *a2 = *(_DWORD *)(v3 + 32);\n      else\n        *a2 = 4;\n      return 0;\n    }\n    else\n    {\n      return -2;\n    }\n  }\n  else\n  {\n    if ( a2 )\n      *a2 = 2 * (a1 == 0) + 4;\n    return -2;\n  }\n}\n</code></pre> <p>The interesting/'dead giveaway part' is the following:</p> <pre><code>v3 = sub_7D17D0();\nif ( v3 )\n  *a2 = *(_DWORD *)(v3 + 32);\nelse\n  *a2 = 4;\nreturn 0;\n</code></pre> <p>A semi-reliable way to find this function is the following: - Find function with string <code>E2008071610</code>.  This is <code>criFsBinder_Destroy</code>. - Sort the <code>functions</code> window by address. - Check functions 1 by 1, by address, ascending.  </p> <p>You should find it within the next ~40 functions. Usually within 10.</p> <p>The reason we choose <code>criFsBinder_Destroy</code> as a reference specifically is because the CRI source must have been reorganised, but in every known CRI version, <code>criFsBinder_Destroy</code> and <code>criFsBinder_GetStatus</code> are in the same <code>.obj</code> file, and thus are in proximity of each other.</p>"},{"location":"adding-game-support/#crifsbinder_setpriority","title":"CriFsBinder_SetPriority","text":"<p>This method is not present in some games, due to dead code elimination.</p> <p>If it does not exist, leave the signature empty. Chances are CriFsV2Hook will still work.</p> <p>Search for method which uses error string <code>E2008072390</code>, this is <code>criFsBinder_SetPriority</code>.</p>"},{"location":"adding-game-support/#crifsbinder_unbind","title":"CriFsBinder_Unbind","text":"<p>Search for method which uses error string <code>E2008122691</code>, this is <code>criFsBinder_Unbind</code>.</p>"},{"location":"adding-game-support/#crifsloader_registerfile","title":"CriFsLoader_RegisterFile","text":"<p>This is the internal method, not the public API method that varies in case.</p> <p>Search for method which uses error string <code>W2008082701</code>. This is <code>crifsloader_register_file</code>.</p>"},{"location":"adding-game-support/#crifsio_open-windows","title":"CriFsIo_Open (Windows)","text":"<p>Search for method which uses error string <code>W2007060101</code>, this is <code>criFsIoWin_Open</code>.</p>"},{"location":"adding-game-support/#crifsio_exists-windows","title":"CriFsIo_Exists (Windows)","text":"<p>Search for method which uses error string  - <code>E2008081901</code> (pre 2015 titles) OR - <code>E2015091137</code> (post 2015 titles)</p> <p>This is <code>criFsIoWin_Exists</code>.</p>"},{"location":"adding-game-support/#crifsio_isutf8-windows","title":"CriFsIo_IsUtf8 (Windows)","text":"<p>This is a signature which points to an <code>if</code> statement (<code>cmp</code> instruction) inside <code>CriFsIo_Exists</code>. Specifically this code.</p> <pre><code>if (isUtf8)\n{\n  v4 = strlen(lpMultiByteStr);\n  MultiByteToWideChar(0xFDE9u, 0, lpMultiByteStr, v4 + 1, WideCharStr, 521);\n  FileAttributesW = GetFileAttributesW(WideCharStr);\n}\nelse\n{\n  FileAttributesW = GetFileAttributesA(lpMultiByteStr);\n}\n</code></pre> <p>We extract the int32 boolean from here.</p> <p>You are done. Go test :p.</p>"},{"location":"adding-game-support/#disablefilebindwarning","title":"DisableFileBindWarning","text":"<p>Only implemented for x64 games, if you run into an x86 game with this, contribute to the project.</p> <p>Some games might report <code>The contents file not found in the binderhn</code> to console in later CRI SDKs. This signature points to the conditional <code>jmp</code> instruction to disable this printout.  </p>"},{"location":"adding-game-support/#when-youre-done","title":"When You're Done","text":"<p>For debugging purposes, feel free to use the toggles inside CriFsV2Hook's mod configuration.</p> <p>Be a good citizen and upload your renamed CRI functions to Lumen, (<code>Lumina</code> -&gt; <code>Push All Metadata</code>).  </p> <p>Lumen signatures cannot be renamed once uploaded, please only upload after you get all of your function names correct.</p>"},{"location":"usage-awb/","title":"About","text":"<p>Info</p> <p>CriFsHook has an extension mod that allows you to replace music inside AWB Containers. </p>"},{"location":"usage-awb/#prerequisites","title":"Prerequisites","text":""},{"location":"usage-awb/#set-dependency-on-awb-extension","title":"Set Dependency on AWB Extension","text":"<p>In the <code>Edit Mod</code> menu (right click your mod in mods list) we're going to add <code>AWB Emulator Support for CRI FileSystem V2 Hook</code> as a dependency.  </p> <p></p>"},{"location":"usage-awb/#usage","title":"Usage","text":"<p>Please refer to FileEmulationFramework wiki.  </p> <p>Note</p> <p>You can skip adding dependency on AWB emulator, do follow rest of guide though.</p>"},{"location":"usage-awb/#example","title":"Example","text":"<p>As per usage guide above.</p> <p></p> <p>Tip</p> <p>If game uses encryption on audio, you might need to encrypt your music with same keys in some cases.</p>"},{"location":"usage-awb/#limitations","title":"Limitations","text":"<p>Warning</p> <p>If the game uses an <code>.acb</code> file alongside the AWB, this mod assumes that the <code>.acb</code> will be named the same as the AWB, i.e. <code>BGM.acb</code> is used with <code>BGM.awb</code>.  </p> <p>If this is not the case, consider contributing to the project with an additional API \ud83d\ude07.</p>"},{"location":"usage/","title":"Prerequisites","text":""},{"location":"usage/#create-a-reloaded-mod","title":"Create a Reloaded Mod","text":"<p>Follow the guidance in the Reloaded wiki to create a new Reloaded mod.  </p>"},{"location":"usage/#download-mod","title":"Download Mod","text":"<p>If you don't have it already, download the <code>CRI FileSystem V2 Hook</code> Mod from GitHub or <code>Download Mods</code> section.  </p> <p></p>"},{"location":"usage/#set-dependency-on-cri-fs-v2-hook","title":"Set Dependency on CRI FS V2 Hook","text":"<p>In the <code>Edit Mod</code> menu (right click your mod in mods list) we're going to add <code>CRI FileSystem V2 Hook</code> as a dependency.  </p> <p></p> <p>Adding a 'dependency' to your mod will make it such that P5R Essentials will always be loaded when your mod is loaded. This is a necessary step. </p>"},{"location":"usage/#replacing-files-in-cpks","title":"Replacing files in CPKs","text":"<p>Files inside CPKs can be replaced by creating a folder called <code>CRIFsV2Hook/CPK</code> in your mod, and adding folders corresponding to the names of the CPKs inside those folders.</p>"},{"location":"usage/#opening-the-mod-folder","title":"Opening the Mod Folder","text":"<p>Go to the folder where your mod is stored, this can be done by simply clicking the <code>Open Folder</code> button.  </p>"},{"location":"usage/#add-some-files","title":"Add Some Files","text":"<p>Make a folder called <code>CRIFsV2Hook</code>, and inside that a folder called <code>CPK</code>.  Inside that folder, make a folder [or multiple!] where you will store your mod files (you can call it anything you want!).  </p> <p></p> <p>I used <code>EN.CPK</code> for clarity to match the game's structure.  </p> <p></p> <p>We will replace these two files to enable different button prompts \ud83d\ude07.</p> <p>The contents of our mod folder would now look as follows.</p> <pre><code>// Mod Contents\nModConfig.json\nPreview.png\nCRIFsV2Hook\n\u2514\u2500CPK\n  \u2514\u2500EN.CPK\n    \u2514\u2500BUTTON\n      \u251c\u2500BUTTON_XBOX.PAK\n      \u2514\u2500BUTTONXBOXTEXINFO.DAT\n</code></pre> <p>The connectors <code>\u2514\u2500</code> represent folders.</p>"},{"location":"usage/#releasinguploading-your-mods","title":"Releasing/Uploading your Mods","text":"<p>Please refer to the Reloaded wiki, and follow the guidance.  </p> <p>You should both Enable Update Support AND Publish according to the guidelines.  </p> <p>It is recommended to enable update support even if you don't plan to ship updates as doing so will allow your mod to be used in Mod Packs.</p>"}]}